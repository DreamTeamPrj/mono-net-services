// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Projects.DataPersistance.DatabaseContext.ProjectDbContext;

#nullable disable

namespace Projects.DataPersistance.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20241207163906_UpdateProjectEntity")]
    partial class UpdateProjectEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Projects.Core.Entities.Commentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Commentaries");
                });

            modelBuilder.Entity("Projects.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<int>>("CustomersId")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("DefaultStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentProjectId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<int>>("RequiredStatuses")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.PrimitiveCollection<List<int>>("StatusList")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Projects.Core.Entities.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("Projects.Core.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<int>>("InspectorsId")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("integer");

                    b.Property<string>("SpentTime")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeSpan")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReleaseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Projects.Core.Entities.Commentary", b =>
                {
                    b.HasOne("Projects.Core.Entities.Commentary", "ParentCommentary")
                        .WithMany("SubComments")
                        .HasForeignKey("ParentId");

                    b.HasOne("Projects.Core.Entities.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCommentary");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Projects.Core.Entities.Project", b =>
                {
                    b.HasOne("Projects.Core.Entities.Project", "ParentProject")
                        .WithMany("SubProjects")
                        .HasForeignKey("ParentProjectId");

                    b.Navigation("ParentProject");
                });

            modelBuilder.Entity("Projects.Core.Entities.Release", b =>
                {
                    b.HasOne("Projects.Core.Entities.Project", "Project")
                        .WithMany("ReleaseList")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Projects.Core.Entities.Task", b =>
                {
                    b.HasOne("Projects.Core.Entities.Task", "ParentTask")
                        .WithMany("SubTaskList")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Projects.Core.Entities.Project", "Project")
                        .WithMany("TaskList")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projects.Core.Entities.Release", "Release")
                        .WithMany("TaskList")
                        .HasForeignKey("ReleaseId");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("Projects.Core.Entities.Commentary", b =>
                {
                    b.Navigation("SubComments");
                });

            modelBuilder.Entity("Projects.Core.Entities.Project", b =>
                {
                    b.Navigation("ReleaseList");

                    b.Navigation("SubProjects");

                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Projects.Core.Entities.Release", b =>
                {
                    b.Navigation("TaskList");
                });

            modelBuilder.Entity("Projects.Core.Entities.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SubTaskList");
                });
#pragma warning restore 612, 618
        }
    }
}
